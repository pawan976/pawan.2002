#include <iostream>
#include <vector>
#include <string>

using namespace std;


struct Task 
{
    string description;
    bool isCompleted;


    Task(string desc) : description(desc), isCompleted(false) {}
};


void displayMenu() 
{
    cout << "\n--- To-Do List Menu ---\n";
    cout << "1. Add Task\n";
    cout << "2. View Tasks\n";
    cout << "3. Remove Task\n";
    cout << "4. Mark Task as Completed\n";
    cout << "5. Exit\n";
    cout << "Enter your choice: ";
}


void addTask(vector<Task>& tasks) 
{
    string description;
    cout << "Enter the task description: ";
    cin.ignore(); 
    getline(cin, description); 
    tasks.emplace_back(description);
    cout << "Task added successfully.\n";
}


void viewTasks(const vector<Task>& tasks) 
{
    if (tasks.empty()) 
    {
        cout << "No tasks available.\n";
        return;
    }

    cout << "\n--- To-Do List ---\n";
    for (size_t i = 0; i < tasks.size(); ++i) 
    {
        cout << i + 1 << ". " << tasks[i].description;
        if (tasks[i].isCompleted) {
            cout << " [Completed]";
        }
        cout << endl;
    }
}


void removeTask(vector<Task>& tasks) 
{
    if (tasks.empty()) 
    {
        cout << "No tasks available to remove.\n";
        return;
    }

    int taskNumber;
    cout << "Enter the task number to remove: ";
    cin >> taskNumber;

    if (taskNumber < 1 || taskNumber > tasks.size()) 
    {
        cout << "Invalid task number.\n";
    } else 
    {
        tasks.erase(tasks.begin() + taskNumber - 1);
        cout << "Task removed successfully.\n";
    }
}


void markTaskCompleted(vector<Task>& tasks) 
{
    if (tasks.empty()) 
    {
        cout << "No tasks available to mark as completed.\n";
        return;
    }

    int taskNumber;
    cout << "Enter the task number to mark as completed: ";
    cin >> taskNumber;

    if (taskNumber < 1 || taskNumber > tasks.size()) 
    {
        cout << "Invalid task number.\n";
    } else 
    {
        tasks[taskNumber - 1].isCompleted = true;
        cout << "Task marked as completed.\n";
    }
}

int main() 
{
    vector<Task> tasks;
    int choice;

    do 
    {
        displayMenu();
        cin >> choice;

        switch (choice) 
        {
            case 1:
                addTask(tasks);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                removeTask(tasks);
                break;
            case 4:
                markTaskCompleted(tasks);
                break;
            case 5:
                cout << "Exiting the program. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}


